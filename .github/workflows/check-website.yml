name: Check Website Availability

on:
  schedule:
    - cron: '*/15 * * * *' # Runs every 15 minutes
  workflow_dispatch: # Allows manual triggering

jobs:
  check-website:
    runs-on: ubuntu-latest

    steps:
      - name: Update CA Certificates
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates
          sudo update-ca-certificates

      - name: Check Google Availability
        id: check-google
        run: |
          echo "Checking www.google.com at $(date -u)" > google_response.log
          STATUS=$(curl -s -v -w '%{http_code}' --max-time 10 --header "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36" -o google_response_body.html https://www.google.com 2>> google_response.log)
          CURL_EXIT=$?
          if [ $CURL_EXIT -ne 0 ]; then
            echo "Error: Could not connect to www.google.com (curl exit code: $CURL_EXIT)." >> google_response.log
            exit 1
          fi
          if [ -z "$STATUS" ]; then
            echo "Error: No status code received from www.google.com." >> google_response.log
            exit 1
          fi
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          if [ "$STATUS" != "200" ]; then
            echo "www.google.com is down! Status code: $STATUS" >> google_response.log
            exit 1
          else
            echo "www.google.com is up! Status code: $STATUS" >> google_response.log
          fi
        shell: bash

      - name: Upload Google Response Log Artifact
        uses: actions/upload-artifact@v4
        with:
          name: google-response-log
          path: google_response.log

      - name: Upload Google Response Body Artifact
        uses: actions/upload-artifact@v4
        with:
          name: google-response-body
          path: google_response_body.html

      - name: Check Portal Availability
        id: check-portal
        run: |
          echo "Checking portal.minv.sk at $(date -u)" > portal_response.log
          STATUS=$(curl -s -v -w '%{http_code}' --max-time 120 --insecure --header "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36" --header "Accept-Language: en-US,en;q=0.9" --header "Connection: keep-alive" -o portal_response_body.html https://portal.minv.sk/wps/portal/!ut/p/a1/jdFBD4IgGAbgn8QLIcoRygDLnJWrvDRPza2sQ-v3R60O1sK-G9vzMt4PUpMtqbvm1h6aa3vumuPjXIs9xzi12QyZkWqEUmimoqIAwD3YeYAfo9DPYxlNUVJjdW7AwNkrHwC9fGLX_tLZNLKyXIxg6Gf-G_TyRU4FVJWvtZIVg3m_f2yU5fH80ShhcBNtJ7HMASf-ywfAwP42pH4SypijeuVJUkoo40TMUk2R0AHg8AKhDk8Q-qRgTURDgJPLqfKzRetadwfspzGT/dl5/d5/L2dBISEvZ0FBIS9nQSEh/ 2>> portal_response.log)
          CURL_EXIT=$?
          echo "Curl exit code: $CURL_EXIT" >> portal_response.log
          if [ $CURL_EXIT -ne 0 ]; then
            echo "Error: Could not connect to portal.minv.sk (curl exit code: $CURL_EXIT)." >> portal_response.log
          fi
          if [ -z "$STATUS" ]; then
            echo "Error: No status code received from portal.minv.sk." >> portal_response.log
            STATUS="0"
          fi
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Portal status code: $STATUS" >> portal_response.log
          if [ "$STATUS" == "302" ]; then
            echo "Note: 302 status indicates a redirect; response body may be empty." >> portal_response.log
            LOCATION=$(grep -i '^< Location:' portal_response.log | awk '{print $3}' | tr -d '\r' | head -n 1)
            if [ -n "$LOCATION" ]; then
              echo "Redirect URL captured: $LOCATION" >> portal_response.log
              echo "location=$LOCATION" >> $GITHUB_OUTPUT
            else
              echo "Warning: No redirect URL received from portal.minv.sk." >> portal_response.log
              echo "location=" >> $GITHUB_OUTPUT
            fi
          else
            echo "No redirect (non-302 status); skipping location capture." >> portal_response.log
            echo "location=" >> $GITHUB_OUTPUT
          fi
          echo "portal.minv.sk is up! Status code: $STATUS" >> portal_response.log
        shell: bash

      - name: Upload Portal Response Log Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: portal-response-log
          path: portal_response.log

      - name: Upload Portal Response Body Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: portal-response-body
          path: portal_response_body.html

      - name: Check Redirect URL
        if: steps.check-portal.outputs.status == '302' && steps.check-portal.outputs.location != ''
        id: check-redirect
        run: |
          echo "Checking redirect URL at $(date -u)" > redirect_response.log
          REDIRECT_URL="${{ steps.check-portal.outputs.location }}"
          echo "Checking redirect URL: $REDIRECT_URL" >> redirect_response.log
          STATUS=$(curl -s -v -w '%{http_code}' --max-time 120 --insecure --header "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36" --header "Accept-Language: en-US,en;q=0.9" --header "Connection: keep-alive" -L -o redirect_response_body.html "$REDIRECT_URL" 2>> redirect_response.log)
          CURL_EXIT=$?
          echo "Curl exit code: $CURL_EXIT" >> redirect_response.log
          if [ $CURL_EXIT -ne 0 ]; then
            echo "Error: Could not connect to redirect URL $REDIRECT_URL (curl exit code: $CURL_EXIT)" >> redirect_response.log
          else
            echo "redirect_status=$STATUS" >> $GITHUB_OUTPUT
            if [ "$STATUS" != "200" ]; then
              echo "Redirect URL $REDIRECT_URL is not responding with status 200. Status code: $STATUS" >> redirect_response.log
            else
              echo "Redirect URL $REDIRECT_URL is up! Status code: $STATUS" >> redirect_response.log
            fi
          fi
        shell: bash

      - name: Upload Redirect Response Log Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: redirect-response-log
          path: redirect_response.log

      - name: Upload Redirect Response Body Artifact
        if: always()
        run: |
          if [ -f redirect_response_body.html ]; then
            echo "Uploading redirect_response_body.html as artifact"
            echo "artifact_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No redirect_response_body.html found; skipping artifact upload"
            echo "artifact_exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Upload Redirect Response Body Artifact (Conditional)
        if: steps.check-redirect.outputs.artifact_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: redirect-response-body
          path: redirect_response_body.html

      - name: Check Fallback URL
        id: check-fallback
        run: |
          echo "Checking fallback URL portal.minv.sk at $(date -u)" > fallback_response.log
          STATUS=$(curl -s -v -w '%{http_code}' --max-time 120 --insecure --header "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36" --header "Accept-Language: en-US,en;q=0.9" --header "Connection: keep-alive" -o fallback_response_body.html https://portal.minv.sk 2>> fallback_response.log)
          CURL_EXIT=$?
          echo "Curl exit code: $CURL_EXIT" >> fallback_response.log
          if [ $CURL_EXIT -ne 0 ]; then
            echo "Error: Could not connect to fallback URL https://portal.minv.sk (curl exit code: $CURL_EXIT)" >> fallback_response.log
          else
            echo "fallback_status=$STATUS" >> $GITHUB_OUTPUT
            if [ "$STATUS" != "200" ]; then
              echo "Fallback URL https://portal.minv.sk is not responding with status 200. Status code: $STATUS" >> fallback_response.log
            else
              echo "Fallback URL https://portal.minv.sk is up! Status code: $STATUS" >> fallback_response.log
            fi
          fi
        shell: bash

      - name: Upload Fallback Response Log Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fallback-response-log
          path: fallback_response.log

      - name: Upload Fallback Response Body Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fallback-response-body
          path: fallback_response_body.html
